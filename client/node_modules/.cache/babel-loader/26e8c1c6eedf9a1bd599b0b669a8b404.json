{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AuthContext from '../../AuthContext';\nimport { fetchAllPosts, postComment, fetchPosts } from '../../actions';\nimport update from 'react-addons-update';\nimport EditComment from '../EditComment/EditComment';\n\nconst Posts = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const {\n    username,\n    allPosts,\n    newComment\n  } = state;\n  const [comment, setComment] = useState({});\n  const [comment_id, setId] = useState('');\n  const [editMode, setEditMode] = useState(false);\n  const [key, setKey] = useState('');\n  console.log(\"state:\");\n  console.log(state);\n  console.log(\"allPosts:\");\n  console.log(allPosts);\n  console.log(\"newComment:\");\n  console.log(newComment);\n  useEffect(() => {\n    fetchAllPosts(username, dispatch);\n  }, [username, newComment]);\n  let new_comment;\n\n  const formatDate = date => {\n    const newDate = new Date(date).toLocaleDateString('en-US');\n    const newTime = new Date(date).toLocaleTimeString('en-US');\n    return `${newDate} at ${newTime}`;\n  };\n\n  const editComment = info => {\n    console.log(\"info:\");\n    console.log(info.comments);\n    console.log(\"Edit hit\");\n    setEditMode(!editMode);\n  };\n\n  const handleChange = e => {\n    e.persist();\n    setId(e.target.id);\n    setComment({\n      [e.target.id]: e.target.value\n    });\n    new_comment = comment[e.target.id];\n    setKey(e.target.getAttribute('data-mongo-id'));\n  };\n\n  const handleSubmit = async e => {\n    console.log(key);\n    console.log(e.target.getAttribute('data-mongo-id'));\n    const newData = update(key, {\n      $set: e.target.getAttribute('data-mongo-id')\n    });\n    const new_comment = comment[comment_id];\n    await postComment(new_comment, username, comment_id, newData, dispatch);\n    await setComment('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, allPosts && allPosts.map((post, i) => {\n    console.log(\"post:\");\n    console.log(post);\n    const nestedComments = post.comments;\n    let iteratedComments;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }, post._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, post.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, \"Written by:\", post.username), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }, post.comments.map(sub => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }, post.username == username ? /*#__PURE__*/React.createElement(\"a\", {\n      role: \"button\",\n      onClick: e => editComment({\n        sub\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 71\n      }\n    }, \"edit\") : null, editMode ? /*#__PURE__*/React.createElement(EditComment, {\n      id: sub._id,\n      content: sub.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 54\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 108\n      }\n    }, sub.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 41\n      }\n    }, \"by: \", sub.commenter), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 41\n      }\n    }, \"by: \", sub._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 41\n      }\n    }, \"Date posted: \", formatDate(sub.createdDate)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(\"textarea\", {\n      key: post._id,\n      id: i,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-mongo-id\": post._id,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, \"Leave a Comment\"));\n  }));\n};\n\nexport default Posts;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js"],"names":["React","useContext","useEffect","useState","AuthContext","fetchAllPosts","postComment","fetchPosts","update","EditComment","Posts","state","dispatch","username","allPosts","newComment","comment","setComment","comment_id","setId","editMode","setEditMode","key","setKey","console","log","new_comment","formatDate","date","newDate","Date","toLocaleDateString","newTime","toLocaleTimeString","editComment","info","comments","handleChange","e","persist","target","id","value","getAttribute","handleSubmit","newData","$set","map","post","i","nestedComments","iteratedComments","_id","title","content","sub","commenter","createdDate"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\nimport AuthContext from '../../AuthContext'\nimport {fetchAllPosts,postComment, fetchPosts} from '../../actions'\nimport update from 'react-addons-update'\nimport EditComment from '../EditComment/EditComment'\n\nconst Posts = () => {\n    const {state,dispatch} = useContext(AuthContext)\n    const {username,allPosts,newComment} = state;\n    const [comment, setComment] = useState({})\n    const [comment_id, setId] = useState('')\n    const [editMode, setEditMode] = useState(false)\n    const [key, setKey] = useState('')\n    \n    console.log(\"state:\")\n    console.log(state)\n    console.log(\"allPosts:\")\n    console.log(allPosts)\n    console.log(\"newComment:\")\n    console.log(newComment)\n\n    useEffect(() =>{\n        fetchAllPosts(username,dispatch)\n\n    },[username,newComment])\n\n    let new_comment;\n\n    const formatDate = date =>{\n        const newDate = new Date(date).toLocaleDateString('en-US');\n        const newTime = new Date(date).toLocaleTimeString('en-US')\n        return `${newDate} at ${newTime}`\n    }\n\n    const editComment = info =>{\n        console.log(\"info:\")\n        console.log(info.comments)\n        console.log(\"Edit hit\")\n        setEditMode(!editMode)\n    }\n\n    const handleChange = e => {\n        e.persist()\n        setId(e.target.id)\n        setComment({[e.target.id]:e.target.value});\n        new_comment = comment[e.target.id]\n        setKey(e.target.getAttribute('data-mongo-id'))\n    }\n    \n    const handleSubmit =  async e =>{\n        console.log(key)\n        console.log(e.target.getAttribute('data-mongo-id'))\n\n        const newData = update(key,{\n            $set:e.target.getAttribute('data-mongo-id')\n        })\n\n        const new_comment = comment[comment_id]\n        await postComment(new_comment, username,comment_id,newData,dispatch)\n        await setComment('');\n    }\n\n    return (\n        <div>\n            {allPosts && allPosts.map((post,i) => {\n                console.log(\"post:\")\n                console.log(post)\n                const nestedComments = post.comments;\n\n                let iteratedComments;\n                return(\n                <div>\n                \n                <br />\n                                <div>{post._id}</div>\n                                <div>{post.title}</div>\n                                <div>{post.content}</div>\n                                <div>Written by:{post.username}</div>\n                                <br />\n                                <ul>\n                                {post.comments.map(sub =>\n                                    <li>\n                                        {post.username == username ? (<a role=\"button\" onClick={e => editComment({sub})}>edit</a>):null}\n                                        {editMode ? (<EditComment id={sub._id} content={sub.content} />) :(<div>{sub.content}</div> )}\n                                        <div>by: {sub.commenter}</div>\n                                        <div>by: {sub._id}</div>\n                                        <div>Date posted: {formatDate(sub.createdDate)}</div>\n                                        <br />\n                                    </li>\n                                    )}\n                                </ul>\n                                <textarea key={post._id} id={i} onChange={handleChange}></textarea>\n                            <button data-mongo-id={post._id} onClick={handleSubmit}>Leave a Comment</button>\n                            {/* {allComments.map(comment =>{<div>{comment.content}</div>})} */}\n\n                            </div>)                    \n                }\n            )}\n\n        </div>\n    )\n}\n\nexport default Posts"]},"metadata":{},"sourceType":"module"}