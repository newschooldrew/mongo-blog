{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AuthContext from '../../AuthContext';\nimport { fetchAllPosts, postComment } from '../../actions';\nimport update from 'react-addons-update';\n\nconst Posts = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const {\n    username,\n    allPosts,\n    allComments\n  } = state;\n  const [comment, setComment] = useState({});\n  const [comment_id, setId] = useState('');\n  const [key, setKey] = useState('');\n  console.log(\"state:\");\n  console.log(state);\n  console.log(\"allComments:\");\n  console.log(allComments);\n  useEffect(() => {\n    fetchAllPosts(username, dispatch); // fetchAllComments(dispatch)\n  }, [username]);\n  let new_comment;\n\n  const handleChange = e => {\n    e.persist();\n    setId(e.target.id); // console.log(comment_id)\n\n    setComment({\n      [e.target.id]: e.target.value\n    }); // console.log(comment[e.target.id])\n\n    new_comment = comment[e.target.id];\n    setKey(e.target.getAttribute('data-mongo-id')); // console.log(key)\n  };\n\n  const handleSubmit = e => {\n    console.log(key);\n    console.log(e.target.getAttribute('data-mongo-id'));\n    const newData = update(key, {\n      $set: e.target.getAttribute('data-mongo-id')\n    }); // console.log(newData)\n    // if(key !== e.target.getAttribute('data-mongo-id')){\n    //     console.log(\"key is different\")\n    //     setKey(e.target.getAttribute('data-mongo-id'))\n    // }\n\n    const new_comment = comment[comment_id];\n    console.log(new_comment);\n    console.log(comment_id);\n    postComment(new_comment, username, comment_id, newData, dispatch);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, allPosts && allPosts.map((post, i) => {\n    const nestedComments = post.comments;\n    console.log(nestedComments);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }\n    }, post._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 33\n      }\n    }, post.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 33\n      }\n    }, \"Written by:\", post.username), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 33\n      }\n    }), nestedComments[i] ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 51\n      }\n    }, nestedComments[i].content) : null, nestedComments[i] ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 51\n      }\n    }, nestedComments[1].content) : null, nestedComments[i] ? nestedComments[i].forEach(com => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 38\n        }\n      }, com);\n    }) : null, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      key: post._id,\n      id: i,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-mongo-id\": post._id,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, \"Leave a Comment\"));\n    {\n      nestedComments.map((comment, i) => {\n        console.log(nestedComments);\n      });\n    }\n  }));\n};\n\nexport default Posts;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js"],"names":["React","useContext","useEffect","useState","AuthContext","fetchAllPosts","postComment","update","Posts","state","dispatch","username","allPosts","allComments","comment","setComment","comment_id","setId","key","setKey","console","log","new_comment","handleChange","e","persist","target","id","value","getAttribute","handleSubmit","newData","$set","map","post","i","nestedComments","comments","_id","title","content","forEach","com"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\nimport AuthContext from '../../AuthContext'\nimport {fetchAllPosts,postComment} from '../../actions'\nimport update from 'react-addons-update'\n\nconst Posts = () => {\n    const {state,dispatch} = useContext(AuthContext)\n    const {username,allPosts,allComments} = state;\n    const [comment, setComment] = useState({})\n    const [comment_id, setId] = useState('')\n    const [key, setKey] = useState('')\n    console.log(\"state:\")\n    console.log(state)\n    console.log(\"allComments:\")\n    console.log(allComments)\n\n    useEffect(() =>{\n        fetchAllPosts(username,dispatch)\n        // fetchAllComments(dispatch)\n    },[username])\n\n    let new_comment;\n    const handleChange = e => {\n        e.persist()\n        setId(e.target.id)\n        // console.log(comment_id)\n        setComment({[e.target.id]:e.target.value});\n        // console.log(comment[e.target.id])\n        new_comment = comment[e.target.id]\n        setKey(e.target.getAttribute('data-mongo-id'))\n        // console.log(key)\n    }\n    \n    const handleSubmit =  e =>{\n        console.log(key)\n        console.log(e.target.getAttribute('data-mongo-id'))\n\n        const newData = update(key,{\n            $set:e.target.getAttribute('data-mongo-id')\n        })\n\n        // console.log(newData)\n\n        // if(key !== e.target.getAttribute('data-mongo-id')){\n        //     console.log(\"key is different\")\n        //     setKey(e.target.getAttribute('data-mongo-id'))\n        // }\n        const new_comment = comment[comment_id]\n        console.log(new_comment)\n        console.log(comment_id)\n        postComment(new_comment, username,comment_id,newData,dispatch)\n    }\n\n    return (\n        <div>\n            {allPosts && allPosts.map((post,i) => {\n                const nestedComments = post.comments;\n                console.log(nestedComments)\n                return(\n                <div>\n                \n                <br />\n                                <div>{post._id}</div>\n                                <div>{post.title}</div>\n                                <div>{post.content}</div>\n                                <div>Written by:{post.username}</div>\n                                <br />\n                            {nestedComments[i] ? (<div>{nestedComments[i].content}</div>) :null}\n                            {nestedComments[i] ? (<div>{nestedComments[1].content}</div>) :null}\n                             {nestedComments[i] ? nestedComments[i].forEach(com =>{\n                                 return(\n                                     <div>{com}</div>\n                                 )\n                             }):null}\n                            {/* <div>{comment.content}</div> */}\n\n                                <br />\n                                {/* <textarea id={_id} onChange={e => setComment(e.target.value)} value={comment || ''}></textarea> */}\n                                <textarea key={post._id} id={i} onChange={handleChange}></textarea>\n                            <button data-mongo-id={post._id} onClick={handleSubmit}>Leave a Comment</button>\n                            {/* {allComments.map(comment =>{<div>{comment.content}</div>})} */}\n\n                            </div>)\n                {nestedComments.map((comment,i) =>{\n                    console.log(nestedComments)\n\n\n\n                    })}\n                    \n                }\n            )}\n\n        </div>\n    )\n}\n\nexport default Posts"]},"metadata":{},"sourceType":"module"}