{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AuthContext from '../../AuthContext';\nimport { fetchAllPosts, postComment, fetchPosts } from '../../actions';\nimport update from 'react-addons-update';\n\nconst Posts = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const {\n    username,\n    allPosts,\n    newComment\n  } = state;\n  const [comment, setComment] = useState({});\n  const [comment_id, setId] = useState('');\n  const [key, setKey] = useState('');\n  console.log(\"state:\");\n  console.log(state);\n  console.log(\"allPosts:\");\n  console.log(allPosts);\n  console.log(\"newComment:\");\n  console.log(newComment);\n  useEffect(() => {\n    fetchAllPosts(username, dispatch);\n  }, [username, newComment]);\n  let new_comment;\n\n  const formatDate = date => {\n    const newDate = new Date(date).toLocaleDateString('en-US');\n    const newTime = new Date(date).toLocaleTimeString('en-US');\n    return `${newDate} at ${newTime}`;\n  };\n\n  const handleChange = e => {\n    e.persist();\n    setId(e.target.id);\n    setComment({\n      [e.target.id]: e.target.value\n    });\n    new_comment = comment[e.target.id];\n    setKey(e.target.getAttribute('data-mongo-id'));\n  };\n\n  const handleSubmit = async e => {\n    console.log(key);\n    console.log(e.target.getAttribute('data-mongo-id'));\n    const newData = update(key, {\n      $set: e.target.getAttribute('data-mongo-id')\n    });\n    const new_comment = comment[comment_id];\n    await postComment(new_comment, username, comment_id, newData, dispatch);\n    await setComment('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, allPosts && allPosts.map((post, i) => {\n    console.log(\"post:\");\n    console.log(post);\n    const nestedComments = post.comments;\n    let iteratedComments;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 33\n      }\n    }, post._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 33\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 33\n      }\n    }, post.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }, \"Written by:\", post.username), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }, post.comments.map(sub => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 41\n      }\n    }, sub.content), post.username == username ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 95\n      }\n    }, \"edit\") : null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 41\n      }\n    }, \"by: \", sub.commenter), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 41\n      }\n    }, \"Date posted: \", formatDate(sub.createdDate)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(\"textarea\", {\n      key: post._id,\n      id: i,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-mongo-id\": post._id,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, \"Leave a Comment\"));\n  }));\n};\n\nexport default Posts;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js"],"names":["React","useContext","useEffect","useState","AuthContext","fetchAllPosts","postComment","fetchPosts","update","Posts","state","dispatch","username","allPosts","newComment","comment","setComment","comment_id","setId","key","setKey","console","log","new_comment","formatDate","date","newDate","Date","toLocaleDateString","newTime","toLocaleTimeString","handleChange","e","persist","target","id","value","getAttribute","handleSubmit","newData","$set","map","post","i","nestedComments","comments","iteratedComments","_id","title","content","sub","commenter","createdDate"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\nimport AuthContext from '../../AuthContext'\nimport {fetchAllPosts,postComment, fetchPosts} from '../../actions'\nimport update from 'react-addons-update'\n\nconst Posts = () => {\n    const {state,dispatch} = useContext(AuthContext)\n    const {username,allPosts,newComment} = state;\n    const [comment, setComment] = useState({})\n    const [comment_id, setId] = useState('')\n    const [key, setKey] = useState('')\n    console.log(\"state:\")\n    console.log(state)\n    console.log(\"allPosts:\")\n    console.log(allPosts)\n    console.log(\"newComment:\")\n    console.log(newComment)\n\n    useEffect(() =>{\n        fetchAllPosts(username,dispatch)\n\n    },[username,newComment])\n\n    let new_comment;\n\n    const formatDate = date =>{\n        const newDate = new Date(date).toLocaleDateString('en-US');\n        const newTime = new Date(date).toLocaleTimeString('en-US')\n        return `${newDate} at ${newTime}`\n    }\n\n    const handleChange = e => {\n        e.persist()\n        setId(e.target.id)\n        setComment({[e.target.id]:e.target.value});\n        new_comment = comment[e.target.id]\n        setKey(e.target.getAttribute('data-mongo-id'))\n    }\n    \n    const handleSubmit =  async e =>{\n        console.log(key)\n        console.log(e.target.getAttribute('data-mongo-id'))\n\n        const newData = update(key,{\n            $set:e.target.getAttribute('data-mongo-id')\n        })\n\n        const new_comment = comment[comment_id]\n        await postComment(new_comment, username,comment_id,newData,dispatch)\n        await setComment('');\n    }\n\n    return (\n        <div>\n            {allPosts && allPosts.map((post,i) => {\n                console.log(\"post:\")\n                console.log(post)\n                const nestedComments = post.comments;\n\n                let iteratedComments;\n                return(\n                <div>\n                \n                <br />\n                                <div>{post._id}</div>\n                                <div>{post.title}</div>\n                                <div>{post.content}</div>\n                                <div>Written by:{post.username}</div>\n                                <br />\n                                <ul>\n                                {post.comments.map(sub =>\n                                    <li>\n                                        <div>{sub.content}</div>{post.username == username ? (<div>edit</div>):null}\n                                        <div>by: {sub.commenter}</div>\n                                        <div>Date posted: {formatDate(sub.createdDate)}</div>\n                                        <br />\n                                    </li>\n                                    )}\n                                </ul>\n                                <textarea key={post._id} id={i} onChange={handleChange}></textarea>\n                            <button data-mongo-id={post._id} onClick={handleSubmit}>Leave a Comment</button>\n                            {/* {allComments.map(comment =>{<div>{comment.content}</div>})} */}\n\n                            </div>)                    \n                }\n            )}\n\n        </div>\n    )\n}\n\nexport default Posts"]},"metadata":{},"sourceType":"module"}