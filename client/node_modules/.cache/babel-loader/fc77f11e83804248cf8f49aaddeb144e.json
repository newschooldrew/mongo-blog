{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AuthContext from '../../AuthContext';\nimport { fetchAllPosts, postComment, fetchPosts } from '../../actions';\nimport update from 'react-addons-update';\nimport EditComment from '../EditComment/EditComment';\n\nconst Posts = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const {\n    username,\n    allPosts,\n    newComment,\n    editMode\n  } = state;\n  const [comment, setComment] = useState({});\n  const [comment_id, setId] = useState('');\n  const [edit_id, setEditId] = useState(''); // const [editMode, setEditMode] = useState(false)\n\n  const [key, setKey] = useState('');\n  console.log(\"state:\");\n  console.log(state);\n  console.log(\"allPosts:\");\n  console.log(allPosts);\n  console.log(\"newComment:\");\n  console.log(newComment);\n  useEffect(() => {\n    fetchAllPosts(username, dispatch);\n  }, [username, editMode]);\n  let new_comment;\n\n  const formatDate = date => {\n    const newDate = new Date(date).toLocaleDateString('en-US');\n    const newTime = new Date(date).toLocaleTimeString('en-US');\n    return `${newDate} at ${newTime}`;\n  };\n\n  const editComment = info => {\n    console.log(\"info:\");\n    console.log(info.sub._id);\n    console.log(\"Edit hit\");\n    setEditId(info.sub._id);\n    dispatch({\n      type: \"TOGGLE_EDIT_MODE\",\n      payload: editMode\n    }); // setEditMode(!editMode)\n  };\n\n  const handleChange = e => {\n    e.persist();\n    setId(e.target.id);\n    setComment({\n      [e.target.id]: e.target.value\n    });\n    new_comment = comment[e.target.id];\n    setKey(e.target.getAttribute('data-mongo-id'));\n  };\n\n  const handleSubmit = async e => {\n    console.log(key);\n    console.log(e.target.getAttribute('data-mongo-id'));\n    const newData = update(key, {\n      $set: e.target.getAttribute('data-mongo-id')\n    });\n    const new_comment = comment[comment_id];\n    await postComment(new_comment, username, comment_id, newData, dispatch);\n    await setComment('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, allPosts && allPosts.map((post, i) => {\n    console.log(\"****************\");\n    console.log(\"comparison:\");\n    console.log(post.comments[i].commenter == username);\n    console.log(username);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, post._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }, post.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }, \"Written by:\", post.username), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }, post.comments.map(sub => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 37\n      }\n    }, post.comments[i].commenter == username ? /*#__PURE__*/React.createElement(\"a\", {\n      role: \"button\",\n      onClick: e => editComment({\n        sub\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 84\n      }\n    }, \"edit\") : null, editMode && edit_id === sub._id ? /*#__PURE__*/React.createElement(EditComment, {\n      id: edit_id,\n      post_id: post._id,\n      content: sub.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 77\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 149\n      }\n    }, sub.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 41\n      }\n    }, \"by: \", sub.commenter), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 41\n      }\n    }, \"by: \", sub._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 41\n      }\n    }, \"Date posted: \", formatDate(sub.createdDate)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(\"textarea\", {\n      key: post._id,\n      id: i,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-mongo-id\": post._id,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    }, \"Leave a Comment\"));\n  }));\n};\n\nexport default Posts;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js"],"names":["React","useContext","useEffect","useState","AuthContext","fetchAllPosts","postComment","fetchPosts","update","EditComment","Posts","state","dispatch","username","allPosts","newComment","editMode","comment","setComment","comment_id","setId","edit_id","setEditId","key","setKey","console","log","new_comment","formatDate","date","newDate","Date","toLocaleDateString","newTime","toLocaleTimeString","editComment","info","sub","_id","type","payload","handleChange","e","persist","target","id","value","getAttribute","handleSubmit","newData","$set","map","post","i","comments","commenter","title","content","createdDate"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\nimport AuthContext from '../../AuthContext'\nimport {fetchAllPosts,postComment, fetchPosts} from '../../actions'\nimport update from 'react-addons-update'\nimport EditComment from '../EditComment/EditComment'\n\nconst Posts = () => {\n    const {state,dispatch} = useContext(AuthContext)\n    const {username,allPosts,newComment,editMode} = state;\n    const [comment, setComment] = useState({})\n    const [comment_id, setId] = useState('')\n    const [edit_id, setEditId] = useState('')\n    // const [editMode, setEditMode] = useState(false)\n    const [key, setKey] = useState('')\n    \n    console.log(\"state:\")\n    console.log(state)\n    console.log(\"allPosts:\")\n    console.log(allPosts)\n    console.log(\"newComment:\")\n    console.log(newComment)\n\n    useEffect(() =>{\n        fetchAllPosts(username,dispatch)\n\n    },[username,editMode])\n\n    let new_comment;\n\n    const formatDate = date =>{\n        const newDate = new Date(date).toLocaleDateString('en-US');\n        const newTime = new Date(date).toLocaleTimeString('en-US')\n        return `${newDate} at ${newTime}`\n    }\n\n    const editComment = info =>{\n        console.log(\"info:\")\n        console.log(info.sub._id)\n        console.log(\"Edit hit\")\n        setEditId(info.sub._id)\n        dispatch({type:\"TOGGLE_EDIT_MODE\",payload:editMode})\n        // setEditMode(!editMode)\n    }\n\n    const handleChange = e => {\n        e.persist()\n        setId(e.target.id)\n        setComment({[e.target.id]:e.target.value});\n        new_comment = comment[e.target.id]\n        setKey(e.target.getAttribute('data-mongo-id'))\n    }\n    \n    const handleSubmit =  async e =>{\n        console.log(key)\n        console.log(e.target.getAttribute('data-mongo-id'))\n\n        const newData = update(key,{\n            $set:e.target.getAttribute('data-mongo-id')\n        })\n\n        const new_comment = comment[comment_id]\n        await postComment(new_comment, username,comment_id,newData,dispatch)\n        await setComment('');\n    }\n\n    return (\n        <div>\n            {allPosts && allPosts.map((post,i) => {\n                console.log(\"****************\")\n                console.log(\"comparison:\")\n                console.log(post.comments[i].commenter == username)\n                console.log(username)\n                return(\n                <div>\n                \n                <br />\n                                <div>{post._id}</div>\n                                <div>{post.title}</div>\n                                <div>{post.content}</div>\n                                <div>Written by:{post.username}</div>\n                                <br />\n                                <ul>\n                                {post.comments.map(sub =>\n                                    <li>\n                                        {post.comments[i].commenter == username ? (<a role=\"button\" onClick={e => editComment({sub})}>edit</a>):null}\n                                        {editMode && edit_id === sub._id ? (<EditComment id={edit_id} post_id={post._id}content={sub.content} />) :(<div>{sub.content}</div> )}\n                                        <div>by: {sub.commenter}</div>\n                                        <div>by: {sub._id}</div>\n                                        <div>Date posted: {formatDate(sub.createdDate)}</div>\n                                        <br />\n                                    </li>\n                                    )}\n                                </ul>\n                                <textarea key={post._id} id={i} onChange={handleChange}></textarea>\n                            <button data-mongo-id={post._id} onClick={handleSubmit}>Leave a Comment</button>\n                            {/* {allComments.map(comment =>{<div>{comment.content}</div>})} */}\n\n                            </div>)                    \n                }\n            )}\n\n        </div>\n    )\n}\n\nexport default Posts"]},"metadata":{},"sourceType":"module"}