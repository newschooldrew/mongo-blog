{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AuthContext from '../../AuthContext';\nimport { fetchAllPosts, postComment, increaseLike, decreaseLike } from '../../actions';\nimport update from 'react-addons-update';\nimport EditComment from '../EditComment/EditComment';\n\nconst Posts = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const {\n    username,\n    allPosts,\n    newComment,\n    editMode,\n    postLiked\n  } = state;\n  const [comment, setComment] = useState({});\n  const [comment_id, setId] = useState('');\n  const [edit_id, setEditId] = useState('');\n  const [edit_flag, setEditFlag] = useState(false);\n  const [likedState, setLikedState] = useState(false);\n  const [key, setKey] = useState('');\n  console.log(\"state:\");\n  console.log(state);\n  console.log(\"allPosts:\");\n  console.log(allPosts);\n  console.log(\"newComment:\");\n  console.log(newComment);\n  useEffect(() => {\n    fetchAllPosts(username, dispatch);\n    console.log(allPosts.likes);\n  }, [username, editMode, likedState]);\n  let new_comment;\n\n  const formatDate = date => {\n    const newDate = new Date(date).toLocaleDateString('en-US');\n    const newTime = new Date(date).toLocaleTimeString('en-US');\n    return `${newDate} at ${newTime}`;\n  };\n\n  const editComment = info => {\n    console.log(\"info:\");\n    console.log(info.sub._id);\n    console.log(\"Edit hit\");\n    setEditId(info.sub._id);\n    dispatch({\n      type: \"TOGGLE_EDIT_MODE\",\n      payload: editMode\n    });\n  };\n\n  const handleLike = async (increaseFunction, decreaseFunction, id) => {\n    if (likedState) {\n      console.log(\"increase function hit\");\n      await increaseFunction(id);\n    } else {\n      console.log(\"decrease function hit\");\n      await decreaseFunction(id);\n    }\n  };\n\n  const handleClick = id => {\n    console.log(\"like post hit\");\n    setLikedState(!likedState);\n    console.log(likedState);\n    handleLike(increaseLike, decreaseLike, id);\n    dispatch({\n      type: \"POST_LIKED\",\n      payload: true\n    });\n  };\n\n  const handleChange = e => {\n    e.persist();\n    setId(e.target.id);\n    setComment({\n      [e.target.id]: e.target.value\n    });\n    new_comment = comment[e.target.id];\n    setKey(e.target.getAttribute('data-mongo-id'));\n  };\n\n  const handleSubmit = async e => {\n    console.log(key);\n    console.log(e.target.getAttribute('data-mongo-id'));\n    const newData = update(key, {\n      $set: e.target.getAttribute('data-mongo-id')\n    });\n    const new_comment = comment[comment_id];\n    await postComment(new_comment, username, comment_id, newData, dispatch);\n    await setComment('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, allPosts && allPosts.map((post, i) => {\n    console.log(\"****************\");\n    console.log(\"comparison:\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }, post._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 33\n      }\n    }, post.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }, \"Written by:\", post.username), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 33\n      }\n    }, \"Likes:\", post.likes), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleClick(post._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 33\n      }\n    }, \"Like Post\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }, post.comments.map(sub => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 37\n      }\n    }, sub.commenter == username ? /*#__PURE__*/React.createElement(\"a\", {\n      role: \"button\",\n      onClick: e => editComment({\n        sub\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 71\n      }\n    }, \"edit\") : null, editMode && edit_id === sub._id ? /*#__PURE__*/React.createElement(EditComment, {\n      id: edit_id,\n      edit_flag: edit_flag,\n      post_id: post._id,\n      content: sub.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 77\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 171\n      }\n    }, sub.content), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    }, \"by: \", sub.commenter), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 41\n      }\n    }, \"by: \", sub._id), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 41\n      }\n    }, \"Date posted: \", formatDate(sub.createdDate)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(\"textarea\", {\n      key: post._id,\n      id: i,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-mongo-id\": post._id,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, \"Leave a Comment\"));\n  }));\n};\n\nexport default Posts;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/july_projects/mongo-blog/client/src/components/Posts/Posts.js"],"names":["React","useContext","useEffect","useState","AuthContext","fetchAllPosts","postComment","increaseLike","decreaseLike","update","EditComment","Posts","state","dispatch","username","allPosts","newComment","editMode","postLiked","comment","setComment","comment_id","setId","edit_id","setEditId","edit_flag","setEditFlag","likedState","setLikedState","key","setKey","console","log","likes","new_comment","formatDate","date","newDate","Date","toLocaleDateString","newTime","toLocaleTimeString","editComment","info","sub","_id","type","payload","handleLike","increaseFunction","decreaseFunction","id","handleClick","handleChange","e","persist","target","value","getAttribute","handleSubmit","newData","$set","map","post","i","title","content","comments","commenter","createdDate"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\nimport AuthContext from '../../AuthContext'\nimport {fetchAllPosts,postComment, increaseLike,decreaseLike} from '../../actions'\nimport update from 'react-addons-update'\nimport EditComment from '../EditComment/EditComment'\n\nconst Posts = () => {\n    const {state,dispatch} = useContext(AuthContext)\n    const {username,allPosts,newComment,editMode,postLiked} = state;\n    const [comment, setComment] = useState({})\n    const [comment_id, setId] = useState('')\n    const [edit_id, setEditId] = useState('')\n    const [edit_flag, setEditFlag] = useState(false)\n    const[likedState,setLikedState] = useState(false)\n    const [key, setKey] = useState('')\n    \n    console.log(\"state:\")\n    console.log(state)\n    console.log(\"allPosts:\")\n    console.log(allPosts)\n    console.log(\"newComment:\")\n    console.log(newComment)\n\n    useEffect(() =>{\n        fetchAllPosts(username,dispatch)\n        console.log(allPosts.likes)\n    },[username,editMode,likedState])\n\n    let new_comment;\n\n    const formatDate = date =>{\n        const newDate = new Date(date).toLocaleDateString('en-US');\n        const newTime = new Date(date).toLocaleTimeString('en-US')\n        return `${newDate} at ${newTime}`\n    }\n\n    const editComment = info =>{\n        console.log(\"info:\")\n        console.log(info.sub._id)\n        console.log(\"Edit hit\")\n        setEditId(info.sub._id)\n        dispatch({type:\"TOGGLE_EDIT_MODE\",payload:editMode})\n    }\n\n\n    const handleLike = async (increaseFunction,decreaseFunction,id) =>{\n        if(likedState){\n            console.log(\"increase function hit\")\n            await increaseFunction(id)\n        } else{\n            console.log(\"decrease function hit\")\n            await decreaseFunction(id)\n        }\n    }\n\n    const handleClick = id =>{\n        console.log(\"like post hit\")\n        setLikedState(!likedState)\n        console.log(likedState)\n        handleLike(increaseLike,decreaseLike,id)\n        dispatch({type:\"POST_LIKED\",payload:true})\n    }\n\n    const handleChange = e => {\n        e.persist()\n        setId(e.target.id)\n        setComment({[e.target.id]:e.target.value});\n        new_comment = comment[e.target.id]\n        setKey(e.target.getAttribute('data-mongo-id'))\n    }\n    \n    const handleSubmit =  async e =>{\n        console.log(key)\n        console.log(e.target.getAttribute('data-mongo-id'))\n\n        const newData = update(key,{\n            $set:e.target.getAttribute('data-mongo-id')\n        })\n\n        const new_comment = comment[comment_id]\n        await postComment(new_comment, username,comment_id,newData,dispatch)\n        await setComment('');\n    }\n\n    return (\n        <div>\n            {allPosts && allPosts.map((post,i) => {\n\n                console.log(\"****************\")\n                console.log(\"comparison:\")\n\n                return(\n                <div>\n                \n                <br />\n                                <div>{post._id}</div>\n                                <div>{post.title}</div>\n                                <div>{post.content}</div>\n                                <div>Written by:{post.username}</div>\n                                <div>Likes:{post.likes}</div>\n                                <button onClick={() =>handleClick(post._id)}>Like Post</button>\n                                <br />\n                                <ul>\n                                {post.comments.map(sub =>\n                                    <li>\n                                        {sub.commenter == username ? (<a role=\"button\" onClick={e => editComment({sub})}>edit</a>):null}\n                                        {editMode && edit_id === sub._id ? (<EditComment id={edit_id} edit_flag={edit_flag} post_id={post._id}content={sub.content} />) :(<div>{sub.content}</div> )}\n                                        <div>by: {sub.commenter}</div>\n                                        <div>by: {sub._id}</div>\n                                        <div>Date posted: {formatDate(sub.createdDate)}</div>\n                                        <br />\n                                    </li>\n                                    )}\n                                </ul>\n                                <textarea key={post._id} id={i} onChange={handleChange}></textarea>\n                            <button data-mongo-id={post._id} onClick={handleSubmit}>Leave a Comment</button>\n                            {/* {allComments.map(comment =>{<div>{comment.content}</div>})} */}\n\n                            </div>)                    \n                }\n            )}\n\n        </div>\n    )\n}\n\nexport default Posts"]},"metadata":{},"sourceType":"module"}